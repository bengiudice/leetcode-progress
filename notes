heap & priority queue
 keywords: kth largest closest scheduler frequent max min
 heapify O(n)
 add/del O(logn)
 find min/max O(1)
 use multiple
 pair (_,_)
 can be slightly more efficient than sorting if you dont end up visiting entire array
 median: small maxheap & large minheap (equal sizes)
 implmented with arrays
 []
 tiebreaker?
 when to push?
 when to pop?

arrays & hashing
 use input array as extra memory to reduce memory complexity
  perhaps flip the sign of values
  some index math

grid
 negative diagonal r - c
 positive diagonal r + c

hashmap

two pointers
 calculate maxLeft and maxRight grid via scan
 pre-calculate useful intermediataries as a grid via scaning
 can reduce memory to O 1 by replacing calculated-grid with variables and pointers
 shift minimum pointer

python
 .sort(key=lambda i: ...) (modifies)
 collections.defaultdict(list)
 temp = list(...)
 enumerate(..)
 sorted(...) (new array)
 rename inputs to single letters
 zip(.., ..)
 [].append([...])
 heapq.heappush(heap, val)
 max(..)

sliding window
 counts hashmap
 pointers for window edges
 have counts and need counts
 grow and shrink window
 O k(n-k)
 monotonically inc/dec deque as window

greedy
 kadanes alg (currMax, globalMax)
 simultaneous min/max kadanes for circular array. min = sum - max
 initialise globals with an element of the array
 bfs with global to eliminate repeated work
 sliding window (l,r pointer)
 sort
 dfs + cache
 bruteforce decision tree + cache
 greedy can be better than DP

intervals
 numberline
 covering: >=
 sort left point?
 minHeap?

strings
 * appends multiple copies

math & geometry
 mod %
 integer division (round down) //
 modular arith
  clock / gear
  inc -> +1 then mod base
  dec -> -1 + base then mod base
 n n-1 n-2 ... 2 1 = n!
 n + n-1 + n-2 ... + 2 + 1 = n2
 log_b(x) = y --> b^y = x
 2 to the power of what is equal to. 

sort
 quicksort
 mergesort
 bucketsort
 sort one array coupled to another

binary search
 left/right bias
 l m r
 (l + r) // 2
 l + (r - l) // 2

search
 quickselect Oav(n) O(n2)
 left/right bias binary search

zero
 neither strictly positive nor strictly negative
 non-negative
 non-positive
 even

longest increasing subsequence
 lis
 maintain relative order
 can skip elements
 decision tree
 dynamic programming

linked list
 dummy head node
 mergeSortedLists via mergesort O klogn
 mergeLists helper fn
 getKth helper fn
 tmp for swaping

constants
 inf => float("inf")

dynamic programming
 keywords: minimum ways maximum
 no: create each combination
 overlapping subproblems
 repeated work
 recursive top-down vs bottom up
 dp/cache = array || hashmap (easier)
 brute force recursion decision tree -> cache/memoise -> optimise by DP
 cache/memoise is top down
 1D -> array -> maybe just a few values
 2D -> matrix
 recurrance relation
 parameters for subproblem
 size of cache
 key for cache
 make the grid/row and solve from one end
 recognise that a more efficient math solution likely exists
 solve smaller first then move towards larger subproblems
 2D
  bruteforce recursion dfs(row,  col)
  hashmap grid as cache
  bottom up
  likely only need one row in memory
  outside layer row/col
  calculations cache grid
 find simpler subproblem (2^n is too complex)
 shift pointers as decision (becomes rows/cols of cache)
 cache n subproblems
 discrete dp timestep grid. col for the dp recurrance relation
 cache input parameters
 the more dp subproblem/cache parameters => worse the time complexity
 dfs(subproblem parameters)



stack
 []
 {}

count
 {}

pre/postfix array

divide and conquor
 independent subproblems

in-place
 swap
 store multiple in one pointer

tree
 dfs
 bfs
 global vs multiple recursive returns
 preorder traversal: root, left, right
 inorder traversal: left, root, right
 postorder traversal: letf, right, root
 N for null
 tree set/map
 invert tree
 generate all trees
 pre/post order tree traversal
 approximately half the size of the tree in in the lowest level
 doubling the size of the tree just means adding another level
 
graph
 dfs
 bfs O n2 queue
 prims algo
 visit hashset
 ROWS, COLS = len(grid), len(grid[0])
 O E+V. if backtracking then O (E+V)2
 mem O(E+V)
 connected?
 neighbors hashmap
 edges hashset
 reuse other ds as visit
 out-of-bounds helper fn
 diagonal? (manhattan-distance)
 direction array
 shortest path: weights=dijstras otherwise=bfs
 bfs supports multiple sources/destinations
 brute force O E^V
 dijstras 
  bfs with min heap
  add all nodes in frontier to minheap
  maintain nodes as a pair (valToBeMinimised, r, c)
  pop min and add all nodes it can reach to frontier
  repeat until arrive at dest
  greedy
  ElogV^2=E2logV=ElogV
 n nodes: max edges = n2
 adjacency list
  naive vs efficient method for creating
  hashmap(list)
  fancy 
  collections.defaultdict(list)
  iterate over input
  maintain in sorted order (sort input)
 build result as we DFS
 backtrack with conditional early return in dfs and reversing decision
 topological sort
  dag
  postorder dfs
  builds result in reverse order
  visit & inCurrentPath hashmap


top/least K
 heap
 quickselect

common strings
 map
 trie

trie / prefix tree
 TrieNode class: 
  children hashmap & isWord boolean
  addWord helper fn
 root = TrieNode()
 add all words to trie
 optimisation: delete from trie when word found

backtracking
 keywords: subsets combinations permutations partition bruteforce 
 decision tree
 bitmask
 backtrack when decision incorrect
 pruning
 O decisions ^ input/height
 counts remaining hashmap
 can lead to DP
 used hashsets
 backtrack helper fn
 backtrack with conditional early return in dfs and reversing decision

combinations
 loose bound: O kn^k
 tight bound: O kn!/(n-k)!k!
 no-duplicates

permutations
 order matters
 spots choices

subsets

subarrays
 there are n2

partitions

subsequences
 maintain relative order
 can skip

substrings
 length n -> 2^n substrings

stuck?
 sort?
 analyse simple cases
 subproblem?
 examples!

quicksort
quickselect
mergesort


monotonic inc/dec stack
min/max heap
priority queue
iterative/recursive DFS/BFS
KMC
reverse linked list (in-place)
union find
sort into and modify BST
combinations
permutations
subsets
subsequences
anagrams
palindromes
binary math
fast slow linked list pointer

